def heuristic_function(start, goal):
    # Manhattan distance heuristic
    return abs(start[0] - goal[0]) + abs(start[1] - goal[1])

def astar(graph, start, goal):
    open_set = set()
    closed_set = set()
    came_from = {}

    g_score = {node: float('inf') for node in graph.nodes()}
    g_score[start] = 0

    f_score = {node: float('inf') for node in graph.nodes()}
    f_score[start] = heuristic_function(start, goal)

    open_set.add(start)

    while open_set:
        current_node = min(open_set, key=f_score.get)

        if current_node == goal:
            return reconstruct_path(came_from, current_node)

        open_set.remove(current_node)
        closed_set.add(current_node)

        for neighbor in graph.neighbors(current_node):
            if neighbor in closed_set:
                continue

            tentative_g_score = g_score[current_node] + graph.edges[current_node, neighbor]['weight']

            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current_node
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic_function(neighbor, goal)

                if neighbor not in open_set:
                    open_set.add(neighbor)

    return None

def reconstruct_path(came_from, current_node):
    total_path = [current_node]

    while current_node in came_from:
        current_node = came_from[current_node]
        total_path.append(current_node)

    total_path.reverse()
    return total_path

if __name__ == "__main__":
    # Create a graph with edge weights representing distances
    graph = nx.Graph()
    graph.add_edge('A', 'B', weight=10)
    graph.add_edge('A', 'C', weight=15)
    graph.add_edge('B', 'D', weight=20)
    graph.add_edge('C', 'D', weight=25)
    graph.add_edge('C', 'E', weight=30)
    graph.add_edge('D', 'E', weight=35)
    graph.add_edge('E', 'F', weight=40)

    start = 'A'
    goal = 'F'

    shortest_path = astar(graph, start, goal)
    print("Shortest path using A* algorithm:", shortest_path)
