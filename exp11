class MapColoringCSP:
    def __init__(self, variables, domains, constraints):
        self.variables = variables
        self.domains = domains
        self.constraints = constraints

    def is_consistent(self, variable, assignment):
        for neighbor in self.constraints.get(variable, []):
            if neighbor in assignment and assignment[variable] == assignment[neighbor]:
                return False
        return True

    def select_unassigned_variable(self, assignment):
        unassigned_variables = [var for var in self.variables if var not in assignment]
        return unassigned_variables[0] if unassigned_variables else None

    def backtracking_search(self, assignment={}):
        if len(assignment) == len(self.variables):
            return assignment  # Solution found
        variable = self.select_unassigned_variable(assignment)
        for value in self.domains[variable]:
            if self.is_consistent(variable, {**assignment, variable: value}):
                assignment[variable] = value
                result = self.backtracking_search(assignment)
                if result is not None:
                    return result
                del assignment[variable]
        return None

def main():
    # Define variables, domains, and constraints for the map coloring problem
    variables = ["WA", "NT", "SA", "Q", "NSW", "V", "T"]
    domains = {var: ["Red", "Green", "Blue"] for var in variables}
    constraints = {
        "WA": ["NT", "SA"],
        "NT": ["WA", "SA", "Q"],
        "SA": ["WA", "NT", "Q", "NSW", "V"],
        "Q": ["NT", "SA", "NSW"],
        "NSW": ["SA", "Q", "V"],
        "V": ["SA", "NSW"],
        "T": [],
    }

    map_coloring_csp = MapColoringCSP(variables, domains, constraints)
    solution = map_coloring_csp.backtracking_search()

    if solution is not None:
        print("Map Coloring Solution:")
        for variable, color in solution.items():
            print(f"{variable}: {color}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
