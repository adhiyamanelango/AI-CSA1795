import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def evaluate(board):
    # Check rows, columns, and diagonals for a winner
    for i in range(3):
        if all(board[i][j] == "X" for j in range(3)):
            return 1
        elif all(board[i][j] == "O" for j in range(3)):
            return -1

        if all(board[j][i] == "X" for j in range(3)):
            return 1
        elif all(board[j][i] == "O" for j in range(3)):
            return -1

    if all(board[i][i] == "X" for i in range(3)) or all(board[i][2 - i] == "X" for i in range(3)):
        return 1
    elif all(board[i][i] == "O" for i in range(3)) or all(board[i][2 - i] == "O" for i in range(3)):
        return -1

    return 0  # No winner

def is_board_full(board):
    return all(board[i][j] != " " for i in range(3) for j in range(3))

def minimax(board, depth, alpha, beta, maximizing_player):
    score = evaluate(board)

    if score != 0:
        return score

    if is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, alpha, beta, False)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, alpha, beta, True)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    alpha = -math.inf
    beta = math.inf

    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "X"
                move_val = minimax(board, 0, alpha, beta, False)
                board[i][j] = " "
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
                alpha = max(alpha, move_val)

    return best_move

def play_tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]

    while True:
        print_board(board)
        row = int(input("Enter your move (row 0-2): "))
        col = int(input("Enter your move (column 0-2): "))

        if board[row][col] == " ":
            board[row][col] = "O"

            if evaluate(board) == -1:
                print_board(board)
                print("You win!")
                break
            elif is_board_full(board):
                print_board(board)
                print("It's a tie!")
                break

            print("Computer's move:")
            computer_move = find_best_move(board)
            board[computer_move[0]][computer_move[1]] = "X"

            if evaluate(board) == 1:
                print_board(board)
                print("Computer wins!")
                break
            elif is_board_full(board):
                print_board(board)
                print("It's a tie!")
                break
        else:
            print("Invalid move. Cell already taken. Try again.")

if __name__ == "__main__":
    play_tic_tac_toe()
