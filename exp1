import heapq
import itertools

# Representation of the 8-Puzzle problem
class PuzzleState:
    def __init__(self, board):
        self.board = board
        self.goal = tuple(range(1, 9))
        
    def __eq__(self, other):
        return self.board == other.board
    
    def __hash__(self):
        return hash(self.board)
    
    def __lt__(self, other):
        return self.heuristic() < other.heuristic()
    
    def heuristic(self):
        return sum(1 if i != j else 0 for i, j in zip(self.board, self.goal))

# A* search algorithm
def astar_search(initial_state):
    heap = []
    heapq.heappush(heap, (0, itertools.count(), initial_state))
    visited = set()

    while heap:
        _, _, current_state = heapq.heappop(heap)

        if current_state.board == current_state.goal:
            return current_state.board

        visited.add(current_state)

        for neighbor in generate_neighbors(current_state):
            if neighbor not in visited:
                cost = current_state.heuristic()
                heapq.heappush(heap, (cost, itertools.count(), neighbor))

    return None

# Generate neighboring states
def generate_neighbors(state):
    neighbors = []
    empty_index = state.board.index(9)
    row, col = empty_index // 3, empty_index % 3

    for dr, dc in ((1, 0), (-1, 0), (0, 1), (0, -1)):
        new_row, new_col = row + dr, col + dc

        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_board = list(state.board)
            new_index = new_row * 3 + new_col
            new_board[empty_index], new_board[new_index] = new_board[new_index], new_board[empty_index]
            neighbors.append(PuzzleState(tuple(new_board)))

    return neighbors

# Main function
def main():
   
